"""add_multi_authority_tables_fixed

Revision ID: 2fabcc67f536
Revises: 009_add_driver_websocket_tables
Create Date: 2025-10-19 18:04:08.224001

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '2fabcc67f536'
down_revision: Union[str, None] = '009_add_driver_websocket_tables'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('authorities',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('company_id', sa.String(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('authority_type', sa.String(length=50), nullable=False),
    sa.Column('dot_mc_number', sa.String(length=20), nullable=True),
    sa.Column('fmc_number', sa.String(length=20), nullable=True),
    sa.Column('license_number', sa.String(length=50), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('is_primary', sa.Boolean(), nullable=True),
    sa.Column('effective_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expiration_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('contact_name', sa.String(length=100), nullable=True),
    sa.Column('contact_phone', sa.String(length=20), nullable=True),
    sa.Column('contact_email', sa.String(length=100), nullable=True),
    sa.Column('business_address', sa.Text(), nullable=True),
    sa.Column('settings', sa.JSON(), nullable=True),
    sa.Column('insurance_requirements', sa.JSON(), nullable=True),
    sa.Column('compliance_requirements', sa.JSON(), nullable=True),
    sa.Column('default_payment_terms', sa.String(length=20), nullable=True),
    sa.Column('default_currency', sa.String(length=3), nullable=True),
    sa.Column('tax_id', sa.String(length=20), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['company_id'], ['companies.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_authority_type', 'authorities', ['authority_type', 'is_active'], unique=False)
    op.create_index('idx_company_authorities', 'authorities', ['company_id', 'is_active'], unique=False)
    op.create_index('idx_company_primary_authority', 'authorities', ['company_id', 'is_primary'], unique=False)
    op.create_index(op.f('ix_authorities_company_id'), 'authorities', ['company_id'], unique=False)
    op.create_index(op.f('ix_authorities_id'), 'authorities', ['id'], unique=False)
    op.create_table('authority_audit_logs',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('authority_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=True),
    sa.Column('action', sa.String(length=50), nullable=False),
    sa.Column('entity_type', sa.String(length=50), nullable=True),
    sa.Column('entity_id', sa.String(length=50), nullable=True),
    sa.Column('old_values', sa.JSON(), nullable=True),
    sa.Column('new_values', sa.JSON(), nullable=True),
    sa.Column('change_summary', sa.Text(), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('session_id', sa.String(length=100), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['authority_id'], ['authorities.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_authority_audit', 'authority_audit_logs', ['authority_id', 'created_at'], unique=False)
    op.create_index('idx_authority_entity_audit', 'authority_audit_logs', ['authority_id', 'entity_type', 'entity_id'], unique=False)
    op.create_index('idx_authority_user_audit', 'authority_audit_logs', ['authority_id', 'user_id', 'created_at'], unique=False)
    op.create_index(op.f('ix_authority_audit_logs_id'), 'authority_audit_logs', ['id'], unique=False)
    op.create_table('authority_customers',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('authority_id', sa.String(), nullable=False),
    sa.Column('customer_id', sa.String(), nullable=False),
    sa.Column('is_primary', sa.Boolean(), nullable=True),
    sa.Column('relationship_type', sa.String(length=50), nullable=True),
    sa.Column('payment_terms', sa.String(length=20), nullable=True),
    sa.Column('credit_limit', sa.Integer(), nullable=True),
    sa.Column('special_instructions', sa.Text(), nullable=True),
    sa.Column('contract_start_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('contract_end_date', sa.DateTime(timezone=True), nullable=True),
    sa.Column('contract_terms', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['authority_id'], ['authorities.id'], ),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_authority_customer_unique', 'authority_customers', ['authority_id', 'customer_id'], unique=True)
    op.create_index('idx_customer_authorities', 'authority_customers', ['customer_id', 'is_primary'], unique=False)
    op.create_index(op.f('ix_authority_customers_id'), 'authority_customers', ['id'], unique=False)
    op.create_table('authority_financials',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('authority_id', sa.String(), nullable=False),
    sa.Column('period_start', sa.DateTime(timezone=True), nullable=False),
    sa.Column('period_end', sa.DateTime(timezone=True), nullable=False),
    sa.Column('period_type', sa.String(length=20), nullable=True),
    sa.Column('total_revenue', sa.Integer(), nullable=True),
    sa.Column('load_count', sa.Integer(), nullable=True),
    sa.Column('average_rate', sa.Integer(), nullable=True),
    sa.Column('gross_revenue', sa.Integer(), nullable=True),
    sa.Column('carrier_payments', sa.Integer(), nullable=True),
    sa.Column('ocean_freight_costs', sa.Integer(), nullable=True),
    sa.Column('port_charges', sa.Integer(), nullable=True),
    sa.Column('fuel_cost', sa.Integer(), nullable=True),
    sa.Column('maintenance_cost', sa.Integer(), nullable=True),
    sa.Column('driver_pay', sa.Integer(), nullable=True),
    sa.Column('overhead_cost', sa.Integer(), nullable=True),
    sa.Column('total_expenses', sa.Integer(), nullable=True),
    sa.Column('gross_profit', sa.Integer(), nullable=True),
    sa.Column('net_profit', sa.Integer(), nullable=True),
    sa.Column('profit_margin', sa.Integer(), nullable=True),
    sa.Column('carrier_count', sa.Integer(), nullable=True),
    sa.Column('average_margin_percent', sa.Integer(), nullable=True),
    sa.Column('container_count', sa.Integer(), nullable=True),
    sa.Column('teu_count', sa.Integer(), nullable=True),
    sa.Column('loads_managed', sa.Integer(), nullable=True),
    sa.Column('customer_count', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['authority_id'], ['authorities.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_authority_period', 'authority_financials', ['authority_id', 'period_start', 'period_end'], unique=False)
    op.create_index('idx_authority_period_type', 'authority_financials', ['authority_id', 'period_type'], unique=False)
    op.create_index(op.f('ix_authority_financials_id'), 'authority_financials', ['id'], unique=False)
    op.create_table('authority_integrations',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('authority_id', sa.String(), nullable=False),
    sa.Column('integration_type', sa.String(length=50), nullable=False),
    sa.Column('provider_name', sa.String(length=100), nullable=False),
    sa.Column('provider_id', sa.String(length=100), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=True),
    sa.Column('configuration', sa.JSON(), nullable=True),
    sa.Column('credentials', sa.JSON(), nullable=True),
    sa.Column('last_sync', sa.DateTime(timezone=True), nullable=True),
    sa.Column('sync_frequency', sa.String(length=20), nullable=True),
    sa.Column('error_count', sa.Integer(), nullable=True),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['authority_id'], ['authorities.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_authority_active_integrations', 'authority_integrations', ['authority_id', 'is_active'], unique=False)
    op.create_index('idx_authority_integrations', 'authority_integrations', ['authority_id', 'integration_type'], unique=False)
    op.create_index(op.f('ix_authority_integrations_id'), 'authority_integrations', ['id'], unique=False)
    op.create_table('authority_users',
    sa.Column('id', sa.String(), nullable=False),
    sa.Column('authority_id', sa.String(), nullable=False),
    sa.Column('user_id', sa.String(), nullable=False),
    sa.Column('can_view', sa.Boolean(), nullable=True),
    sa.Column('can_edit', sa.Boolean(), nullable=True),
    sa.Column('can_manage', sa.Boolean(), nullable=True),
    sa.Column('can_create_loads', sa.Boolean(), nullable=True),
    sa.Column('can_view_financials', sa.Boolean(), nullable=True),
    sa.Column('can_manage_customers', sa.Boolean(), nullable=True),
    sa.Column('is_primary_authority', sa.Boolean(), nullable=True),
    sa.Column('assigned_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('assigned_by_id', sa.String(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['assigned_by_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['authority_id'], ['authorities.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_authority_user_unique', 'authority_users', ['authority_id', 'user_id'], unique=True)
    op.create_index('idx_user_authorities', 'authority_users', ['user_id', 'is_primary_authority'], unique=False)
    op.create_index(op.f('ix_authority_users_id'), 'authority_users', ['id'], unique=False)
    op.drop_index(op.f('idx_write_locks_active'), table_name='write_locks')
    op.drop_index(op.f('idx_write_locks_company'), table_name='write_locks')
    op.drop_index(op.f('idx_write_locks_record'), table_name='write_locks')
    op.drop_index(op.f('idx_write_locks_user'), table_name='write_locks')
    op.drop_table('write_locks')
    op.drop_index(op.f('idx_api_key_company_active'), table_name='api_keys')
    op.drop_index(op.f('idx_api_key_expires'), table_name='api_keys')
    op.drop_index(op.f('idx_api_key_last_used'), table_name='api_keys')
    op.drop_index(op.f('idx_api_key_prefix'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_company_id'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_expires_at'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_is_active'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_key_hash'), table_name='api_keys')
    op.drop_index(op.f('ix_api_keys_last_used_at'), table_name='api_keys')
    op.drop_table('api_keys')
    op.drop_index(op.f('idx_location_financials_location'), table_name='location_financials')
    op.drop_index(op.f('idx_location_financials_period'), table_name='location_financials')
    op.drop_table('location_financials')
    op.drop_index(op.f('idx_rate_limit_exceeded'), table_name='api_key_rate_limits')
    op.drop_index(op.f('idx_rate_limit_key_day'), table_name='api_key_rate_limits')
    op.drop_index(op.f('idx_rate_limit_key_hour'), table_name='api_key_rate_limits')
    op.drop_index(op.f('ix_api_key_rate_limits_api_key_id'), table_name='api_key_rate_limits')
    op.drop_index(op.f('ix_api_key_rate_limits_day_start'), table_name='api_key_rate_limits')
    op.drop_index(op.f('ix_api_key_rate_limits_hour_start'), table_name='api_key_rate_limits')
    op.drop_table('api_key_rate_limits')
    op.drop_index(op.f('idx_location_equipment_active'), table_name='location_equipment')
    op.drop_index(op.f('idx_location_equipment_location'), table_name='location_equipment')
    op.drop_index(op.f('idx_location_equipment_status'), table_name='location_equipment')
    op.drop_index(op.f('idx_location_equipment_type'), table_name='location_equipment')
    op.drop_table('location_equipment')
    op.drop_index(op.f('idx_record_versions_record'), table_name='record_versions')
    op.drop_index(op.f('idx_record_versions_user'), table_name='record_versions')
    op.drop_table('record_versions')
    op.drop_index(op.f('idx_security_company_timestamp'), table_name='security_events')
    op.drop_index(op.f('idx_security_resolved'), table_name='security_events')
    op.drop_index(op.f('idx_security_severity_timestamp'), table_name='security_events')
    op.drop_index(op.f('idx_security_type_timestamp'), table_name='security_events')
    op.drop_index(op.f('ix_security_events_company_id'), table_name='security_events')
    op.drop_index(op.f('ix_security_events_event_type'), table_name='security_events')
    op.drop_index(op.f('ix_security_events_severity'), table_name='security_events')
    op.drop_index(op.f('ix_security_events_user_id'), table_name='security_events')
    op.drop_table('security_events')
    op.drop_index(op.f('idx_collaboration_messages_created'), table_name='collaboration_messages')
    op.drop_index(op.f('idx_collaboration_messages_record'), table_name='collaboration_messages')
    op.drop_index(op.f('idx_collaboration_messages_sender'), table_name='collaboration_messages')
    op.drop_table('collaboration_messages')
    op.drop_index(op.f('idx_audit_action_timestamp'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_company_timestamp'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_compliance_timestamp'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_resource_timestamp'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_risk_timestamp'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_status_timestamp'), table_name='audit_logs')
    op.drop_index(op.f('idx_audit_user_timestamp'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_action'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_company_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_compliance_category'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_resource_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_resource_type'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_risk_level'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_session_id'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_status'), table_name='audit_logs')
    op.drop_index(op.f('ix_audit_logs_user_id'), table_name='audit_logs')
    op.drop_table('audit_logs')
    op.drop_index(op.f('idx_api_company_timestamp'), table_name='api_access_logs')
    op.drop_index(op.f('idx_api_endpoint_timestamp'), table_name='api_access_logs')
    op.drop_index(op.f('idx_api_key_timestamp'), table_name='api_access_logs')
    op.drop_index(op.f('idx_api_status_timestamp'), table_name='api_access_logs')
    op.drop_index(op.f('ix_api_access_logs_api_key_id'), table_name='api_access_logs')
    op.drop_index(op.f('ix_api_access_logs_company_id'), table_name='api_access_logs')
    op.drop_index(op.f('ix_api_access_logs_endpoint'), table_name='api_access_logs')
    op.drop_index(op.f('ix_api_access_logs_request_id'), table_name='api_access_logs')
    op.drop_index(op.f('ix_api_access_logs_status_code'), table_name='api_access_logs')
    op.drop_index(op.f('ix_api_access_logs_user_id'), table_name='api_access_logs')
    op.drop_table('api_access_logs')
    op.drop_index(op.f('idx_company_locations_active'), table_name='company_locations')
    op.drop_index(op.f('idx_company_locations_company'), table_name='company_locations')
    op.drop_index(op.f('idx_company_locations_primary'), table_name='company_locations')
    op.drop_index(op.f('idx_company_locations_type'), table_name='company_locations')
    op.drop_table('company_locations')
    op.drop_index(op.f('idx_driver_location_company'), table_name='driver_location_history')
    op.drop_index(op.f('idx_driver_location_load'), table_name='driver_location_history')
    op.drop_index(op.f('idx_driver_location_timestamp'), table_name='driver_location_history')
    op.drop_table('driver_location_history')
    op.drop_index(op.f('idx_usage_company_timestamp'), table_name='api_key_usage')
    op.drop_index(op.f('idx_usage_endpoint_timestamp'), table_name='api_key_usage')
    op.drop_index(op.f('idx_usage_hourly'), table_name='api_key_usage')
    op.drop_index(op.f('idx_usage_key_timestamp'), table_name='api_key_usage')
    op.drop_index(op.f('ix_api_key_usage_api_key_id'), table_name='api_key_usage')
    op.drop_index(op.f('ix_api_key_usage_company_id'), table_name='api_key_usage')
    op.drop_index(op.f('ix_api_key_usage_endpoint'), table_name='api_key_usage')
    op.drop_index(op.f('ix_api_key_usage_timestamp'), table_name='api_key_usage')
    op.drop_table('api_key_usage')
    op.drop_index(op.f('idx_location_users_active'), table_name='location_users')
    op.drop_index(op.f('idx_location_users_location'), table_name='location_users')
    op.drop_index(op.f('idx_location_users_role'), table_name='location_users')
    op.drop_index(op.f('idx_location_users_user'), table_name='location_users')
    op.drop_table('location_users')
    op.drop_index(op.f('idx_record_viewers_active'), table_name='record_viewers')
    op.drop_index(op.f('idx_record_viewers_record'), table_name='record_viewers')
    op.drop_index(op.f('idx_record_viewers_user'), table_name='record_viewers')
    op.drop_table('record_viewers')
    op.drop_index(op.f('idx_driver_connection_company'), table_name='driver_connection_logs')
    op.drop_index(op.f('idx_driver_connection_connected'), table_name='driver_connection_logs')
    op.drop_index(op.f('idx_driver_connection_driver'), table_name='driver_connection_logs')
    op.drop_index(op.f('idx_driver_connection_type'), table_name='driver_connection_logs')
    op.drop_table('driver_connection_logs')
    op.drop_index(op.f('idx_inter_location_transfers_company'), table_name='inter_location_transfers')
    op.drop_index(op.f('idx_inter_location_transfers_from'), table_name='inter_location_transfers')
    op.drop_index(op.f('idx_inter_location_transfers_status'), table_name='inter_location_transfers')
    op.drop_index(op.f('idx_inter_location_transfers_to'), table_name='inter_location_transfers')
    op.drop_index(op.f('idx_inter_location_transfers_type'), table_name='inter_location_transfers')
    op.drop_table('inter_location_transfers')
    op.drop_index(op.f('idx_write_lock_requests_record'), table_name='write_lock_requests')
    op.drop_index(op.f('idx_write_lock_requests_requester'), table_name='write_lock_requests')
    op.drop_index(op.f('idx_write_lock_requests_status'), table_name='write_lock_requests')
    op.drop_table('write_lock_requests')
    op.create_foreign_key(None, 'banking_accounts', 'banking_customers', ['customer_id'], ['id'], ondelete='CASCADE')
    op.alter_column('banking_cards', 'restrictions',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.create_foreign_key(None, 'banking_cards', 'banking_accounts', ['account_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'banking_customers', 'companies', ['company_id'], ['id'])
    op.alter_column('banking_transactions', 'transaction_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.create_foreign_key(None, 'banking_transactions', 'banking_accounts', ['account_id'], ['id'], ondelete='CASCADE')
    op.create_foreign_key(None, 'banking_transactions', 'banking_cards', ['card_id'], ['id'], ondelete='SET NULL')
    op.alter_column('banking_transfers', 'transfer_metadata',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.create_foreign_key(None, 'banking_transfers', 'banking_accounts', ['to_account_id'], ['id'], ondelete='SET NULL')
    op.create_foreign_key(None, 'banking_transfers', 'banking_accounts', ['from_account_id'], ['id'], ondelete='CASCADE')
    op.alter_column('bills', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('bills', 'companyId',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('bills', 'vendorId',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('bills', 'vendorName',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('bills', 'category',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('bills', 'status',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'pending'::text"))
    op.alter_column('bills', 'notes',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index(op.f('idx_bills_company_id'), table_name='bills')
    op.drop_index(op.f('idx_bills_vendor_id'), table_name='bills')
    op.create_index(op.f('ix_bills_companyId'), 'bills', ['companyId'], unique=False)
    op.create_index(op.f('ix_bills_vendorId'), 'bills', ['vendorId'], unique=False)
    op.drop_constraint(op.f('conversation_read_status_user_id_fkey'), 'conversation_read_status', type_='foreignkey')
    op.add_column('conversations', sa.Column('conversation_type', sa.Enum('DIRECT', 'TEAM', name='conversationtype'), nullable=False))
    op.add_column('conversations', sa.Column('team_id', sa.String(length=36), nullable=True))
    op.add_column('conversations', sa.Column('team_name', sa.String(length=255), nullable=True))
    op.alter_column('conversations', 'participant1_id',
               existing_type=sa.VARCHAR(length=36),
               nullable=True)
    op.alter_column('conversations', 'participant2_id',
               existing_type=sa.VARCHAR(length=36),
               nullable=True)
    op.alter_column('conversations', 'participant1_type',
               existing_type=sa.VARCHAR(length=10),
               nullable=True,
               existing_server_default=sa.text("'user'::character varying"))
    op.alter_column('conversations', 'participant2_type',
               existing_type=sa.VARCHAR(length=10),
               nullable=True,
               existing_server_default=sa.text("'user'::character varying"))
    op.drop_column('documents', 'expirydate')
    op.drop_column('drivers', 'assignedTruckId')
    op.alter_column('simple_loads', 'truckAssignmentStatus',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True,
               existing_server_default=sa.text("'truck_assignment_required'::text"))
    op.alter_column('simple_loads', 'truckAssignmentTime',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'driverConfirmationTime',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'trailerSetupTime',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'truckConfirmationTime',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'pickupStatus',
               existing_type=sa.VARCHAR(),
               nullable=True,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('simple_loads', 'navigationStartTime',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'pickupArrivalTime',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'trailerConfirmationTime',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'containerConfirmationTime',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'pickupConfirmationTime',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'departureTime',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'billOfLadingUrl',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'pickupNotes',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'arrivalTime',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'dockingTime',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'unloadingStartTime',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'unloadingEndTime',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'deliveryTime',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'proofOfDeliveryUrl',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'recipientName',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'deliveryNotes',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'meta',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'last_location_update',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'actual_pickup_time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'actual_delivery_time',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               type_=sa.DateTime(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'route_history',
               existing_type=postgresql.JSONB(astext_type=sa.Text()),
               type_=sa.JSON(),
               existing_nullable=True)
    op.drop_index(op.f('idx_simple_loads_current_location'), table_name='simple_loads')
    op.drop_index(op.f('idx_simple_loads_delivery_location'), table_name='simple_loads')
    op.drop_index(op.f('idx_simple_loads_last_update'), table_name='simple_loads')
    op.drop_index(op.f('idx_simple_loads_pickup_location'), table_name='simple_loads')
    op.drop_index(op.f('idx_users_activation_token'), table_name='users')
    op.alter_column('vendors', 'id',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('vendors', 'companyId',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('vendors', 'title',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'firstName',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'middleName',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'lastName',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'suffix',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'company',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'displayName',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=False)
    op.alter_column('vendors', 'printOnCheck',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'address',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'city',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'state',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'zipCode',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'country',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'email',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'phone',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'mobile',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'fax',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'other',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'website',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'terms',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'accountNumber',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.alter_column('vendors', 'taxId',
               existing_type=sa.TEXT(),
               type_=sa.String(),
               existing_nullable=True)
    op.drop_index(op.f('idx_vendors_company_id'), table_name='vendors')
    op.create_index(op.f('ix_vendors_companyId'), 'vendors', ['companyId'], unique=False)
    op.drop_column('vendors', 'totalSpend')
    op.drop_column('vendors', 'total_spend')
    op.drop_column('vendors', 'payment_terms')
    op.drop_column('vendors', 'lastPayment')
    op.drop_column('vendors', 'details')
    op.drop_column('vendors', 'last_payment')
    op.drop_column('vendors', 'status')
    op.drop_column('vendors', 'paymentTerms')
    op.drop_column('vendors', 'category')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('vendors', sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('vendors', sa.Column('paymentTerms', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('vendors', sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('vendors', sa.Column('last_payment', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('vendors', sa.Column('details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True))
    op.add_column('vendors', sa.Column('lastPayment', sa.DATE(), autoincrement=False, nullable=True))
    op.add_column('vendors', sa.Column('payment_terms', sa.INTEGER(), autoincrement=False, nullable=True))
    op.add_column('vendors', sa.Column('total_spend', sa.NUMERIC(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.add_column('vendors', sa.Column('totalSpend', sa.NUMERIC(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.drop_index(op.f('ix_vendors_companyId'), table_name='vendors')
    op.create_index(op.f('idx_vendors_company_id'), 'vendors', ['companyId'], unique=False)
    op.alter_column('vendors', 'taxId',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'accountNumber',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'terms',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'website',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'other',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'fax',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'mobile',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'phone',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'email',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'country',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'zipCode',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'state',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'city',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'address',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'printOnCheck',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'displayName',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('vendors', 'company',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'suffix',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'lastName',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'middleName',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'firstName',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'title',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('vendors', 'companyId',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('vendors', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.create_index(op.f('idx_users_activation_token'), 'users', ['activationtoken'], unique=False)
    op.create_index(op.f('idx_simple_loads_pickup_location'), 'simple_loads', ['actual_pickup_latitude', 'actual_pickup_longitude'], unique=False)
    op.create_index(op.f('idx_simple_loads_last_update'), 'simple_loads', ['last_location_update'], unique=False)
    op.create_index(op.f('idx_simple_loads_delivery_location'), 'simple_loads', ['actual_delivery_latitude', 'actual_delivery_longitude'], unique=False)
    op.create_index(op.f('idx_simple_loads_current_location'), 'simple_loads', ['current_driver_latitude', 'current_driver_longitude'], unique=False)
    op.alter_column('simple_loads', 'route_history',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('simple_loads', 'actual_delivery_time',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'actual_pickup_time',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'last_location_update',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'meta',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.alter_column('simple_loads', 'deliveryNotes',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'recipientName',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'proofOfDeliveryUrl',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'deliveryTime',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'unloadingEndTime',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'unloadingStartTime',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'dockingTime',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'arrivalTime',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'pickupNotes',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'billOfLadingUrl',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('simple_loads', 'departureTime',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'pickupConfirmationTime',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'containerConfirmationTime',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'trailerConfirmationTime',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'pickupArrivalTime',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'navigationStartTime',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'pickupStatus',
               existing_type=sa.VARCHAR(),
               nullable=False,
               existing_server_default=sa.text("'pending'::character varying"))
    op.alter_column('simple_loads', 'truckConfirmationTime',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'trailerSetupTime',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'driverConfirmationTime',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'truckAssignmentTime',
               existing_type=sa.DateTime(),
               type_=postgresql.TIMESTAMP(timezone=True),
               existing_nullable=True)
    op.alter_column('simple_loads', 'truckAssignmentStatus',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'truck_assignment_required'::text"))
    op.add_column('drivers', sa.Column('assignedTruckId', sa.VARCHAR(), autoincrement=False, nullable=True))
    op.add_column('documents', sa.Column('expirydate', postgresql.TIMESTAMP(), autoincrement=False, nullable=True))
    op.alter_column('conversations', 'participant2_type',
               existing_type=sa.VARCHAR(length=10),
               nullable=False,
               existing_server_default=sa.text("'user'::character varying"))
    op.alter_column('conversations', 'participant1_type',
               existing_type=sa.VARCHAR(length=10),
               nullable=False,
               existing_server_default=sa.text("'user'::character varying"))
    op.alter_column('conversations', 'participant2_id',
               existing_type=sa.VARCHAR(length=36),
               nullable=False)
    op.alter_column('conversations', 'participant1_id',
               existing_type=sa.VARCHAR(length=36),
               nullable=False)
    op.drop_column('conversations', 'team_name')
    op.drop_column('conversations', 'team_id')
    op.drop_column('conversations', 'conversation_type')
    op.create_foreign_key(op.f('conversation_read_status_user_id_fkey'), 'conversation_read_status', 'users', ['participant_id'], ['id'])
    op.drop_index(op.f('ix_bills_vendorId'), table_name='bills')
    op.drop_index(op.f('ix_bills_companyId'), table_name='bills')
    op.create_index(op.f('idx_bills_vendor_id'), 'bills', ['vendorId'], unique=False)
    op.create_index(op.f('idx_bills_company_id'), 'bills', ['companyId'], unique=False)
    op.alter_column('bills', 'notes',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('bills', 'status',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True,
               existing_server_default=sa.text("'pending'::text"))
    op.alter_column('bills', 'category',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('bills', 'vendorName',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('bills', 'vendorId',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=True)
    op.alter_column('bills', 'companyId',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.alter_column('bills', 'id',
               existing_type=sa.String(),
               type_=sa.TEXT(),
               existing_nullable=False)
    op.drop_constraint(None, 'banking_transfers', type_='foreignkey')
    op.drop_constraint(None, 'banking_transfers', type_='foreignkey')
    op.alter_column('banking_transfers', 'transfer_metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_constraint(None, 'banking_transactions', type_='foreignkey')
    op.drop_constraint(None, 'banking_transactions', type_='foreignkey')
    op.alter_column('banking_transactions', 'transaction_metadata',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_constraint(None, 'banking_customers', type_='foreignkey')
    op.drop_constraint(None, 'banking_cards', type_='foreignkey')
    op.alter_column('banking_cards', 'restrictions',
               existing_type=sa.JSON(),
               type_=postgresql.JSONB(astext_type=sa.Text()),
               existing_nullable=True)
    op.drop_constraint(None, 'banking_accounts', type_='foreignkey')
    op.create_table('write_lock_requests',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('record_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('record_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('requester_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('requester_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('current_locker_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('current_locker_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('requested_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('responded_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('write_lock_requests_pkey'))
    )
    op.create_index(op.f('idx_write_lock_requests_status'), 'write_lock_requests', ['status', 'expires_at'], unique=False)
    op.create_index(op.f('idx_write_lock_requests_requester'), 'write_lock_requests', ['requester_id'], unique=False)
    op.create_index(op.f('idx_write_lock_requests_record'), 'write_lock_requests', ['record_type', 'record_id'], unique=False)
    op.create_table('inter_location_transfers',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('transfer_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('item_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('from_location_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('to_location_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('transfer_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('estimated_arrival', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('actual_arrival', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('transfer_reason', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('authorized_by', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('inter_location_transfers_pkey'))
    )
    op.create_index(op.f('idx_inter_location_transfers_type'), 'inter_location_transfers', ['transfer_type'], unique=False)
    op.create_index(op.f('idx_inter_location_transfers_to'), 'inter_location_transfers', ['to_location_id'], unique=False)
    op.create_index(op.f('idx_inter_location_transfers_status'), 'inter_location_transfers', ['status'], unique=False)
    op.create_index(op.f('idx_inter_location_transfers_from'), 'inter_location_transfers', ['from_location_id'], unique=False)
    op.create_index(op.f('idx_inter_location_transfers_company'), 'inter_location_transfers', ['company_id'], unique=False)
    op.create_table('driver_connection_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('driver_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('connected_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('disconnected_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('connection_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('device_info', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('app_version', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('session_duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('disconnect_reason', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('driver_connection_logs_pkey'))
    )
    op.create_index(op.f('idx_driver_connection_type'), 'driver_connection_logs', ['connection_type'], unique=False)
    op.create_index(op.f('idx_driver_connection_driver'), 'driver_connection_logs', ['driver_id'], unique=False)
    op.create_index(op.f('idx_driver_connection_connected'), 'driver_connection_logs', ['connected_at'], unique=False)
    op.create_index(op.f('idx_driver_connection_company'), 'driver_connection_logs', ['company_id'], unique=False)
    op.create_table('record_viewers',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('record_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('record_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('viewing_since', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('last_activity', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('record_viewers_pkey'))
    )
    op.create_index(op.f('idx_record_viewers_user'), 'record_viewers', ['user_id'], unique=False)
    op.create_index(op.f('idx_record_viewers_record'), 'record_viewers', ['record_type', 'record_id'], unique=False)
    op.create_index(op.f('idx_record_viewers_active'), 'record_viewers', ['is_active', 'last_activity'], unique=False)
    op.create_table('location_users',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('location_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('role', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_primary_location', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('assigned_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('assigned_by', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('location_users_pkey'))
    )
    op.create_index(op.f('idx_location_users_user'), 'location_users', ['user_id'], unique=False)
    op.create_index(op.f('idx_location_users_role'), 'location_users', ['role'], unique=False)
    op.create_index(op.f('idx_location_users_location'), 'location_users', ['location_id'], unique=False)
    op.create_index(op.f('idx_location_users_active'), 'location_users', ['is_active'], unique=False)
    op.create_table('api_key_usage',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('api_key_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('endpoint', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('method', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('status_code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('response_time_ms', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('api_key_usage_pkey'))
    )
    op.create_index(op.f('ix_api_key_usage_timestamp'), 'api_key_usage', ['timestamp'], unique=False)
    op.create_index(op.f('ix_api_key_usage_endpoint'), 'api_key_usage', ['endpoint'], unique=False)
    op.create_index(op.f('ix_api_key_usage_company_id'), 'api_key_usage', ['company_id'], unique=False)
    op.create_index(op.f('ix_api_key_usage_api_key_id'), 'api_key_usage', ['api_key_id'], unique=False)
    op.create_index(op.f('idx_usage_key_timestamp'), 'api_key_usage', ['api_key_id', 'timestamp'], unique=False)
    op.create_index(op.f('idx_usage_hourly'), 'api_key_usage', ['api_key_id', 'timestamp'], unique=False)
    op.create_index(op.f('idx_usage_endpoint_timestamp'), 'api_key_usage', ['endpoint', 'timestamp'], unique=False)
    op.create_index(op.f('idx_usage_company_timestamp'), 'api_key_usage', ['company_id', 'timestamp'], unique=False)
    op.create_table('driver_location_history',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('driver_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('accuracy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('speed', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('heading', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('altitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_moving', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_on_duty', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('load_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('driver_location_history_pkey'))
    )
    op.create_index(op.f('idx_driver_location_timestamp'), 'driver_location_history', ['driver_id', 'timestamp'], unique=False)
    op.create_index(op.f('idx_driver_location_load'), 'driver_location_history', ['load_id', 'timestamp'], unique=False)
    op.create_index(op.f('idx_driver_location_company'), 'driver_location_history', ['company_id', 'timestamp'], unique=False)
    op.create_table('company_locations',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('location_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('location_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('address', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('city', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('state', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('zip_code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('country', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('phone', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('contact_person', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('latitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('longitude', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_primary', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('company_locations_pkey'))
    )
    op.create_index(op.f('idx_company_locations_type'), 'company_locations', ['location_type'], unique=False)
    op.create_index(op.f('idx_company_locations_primary'), 'company_locations', ['is_primary'], unique=False)
    op.create_index(op.f('idx_company_locations_company'), 'company_locations', ['company_id'], unique=False)
    op.create_index(op.f('idx_company_locations_active'), 'company_locations', ['is_active'], unique=False)
    op.create_table('api_access_logs',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('request_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('api_key_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('company_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('method', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('endpoint', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('query_params', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('request_size', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('status_code', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('response_size', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('response_time_ms', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rate_limit_hit', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('rate_limit_remaining', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('api_access_logs_pkey'))
    )
    op.create_index(op.f('ix_api_access_logs_user_id'), 'api_access_logs', ['user_id'], unique=False)
    op.create_index(op.f('ix_api_access_logs_status_code'), 'api_access_logs', ['status_code'], unique=False)
    op.create_index(op.f('ix_api_access_logs_request_id'), 'api_access_logs', ['request_id'], unique=False)
    op.create_index(op.f('ix_api_access_logs_endpoint'), 'api_access_logs', ['endpoint'], unique=False)
    op.create_index(op.f('ix_api_access_logs_company_id'), 'api_access_logs', ['company_id'], unique=False)
    op.create_index(op.f('ix_api_access_logs_api_key_id'), 'api_access_logs', ['api_key_id'], unique=False)
    op.create_index(op.f('idx_api_status_timestamp'), 'api_access_logs', ['status_code', 'timestamp'], unique=False)
    op.create_index(op.f('idx_api_key_timestamp'), 'api_access_logs', ['api_key_id', 'timestamp'], unique=False)
    op.create_index(op.f('idx_api_endpoint_timestamp'), 'api_access_logs', ['endpoint', 'timestamp'], unique=False)
    op.create_index(op.f('idx_api_company_timestamp'), 'api_access_logs', ['company_id', 'timestamp'], unique=False)
    op.create_table('audit_logs',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('request_method', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('request_path', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('action', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('resource_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('resource_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('changes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('old_values', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('new_values', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('metadata_json', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('risk_level', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('compliance_category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('retention_period', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('audit_logs_pkey'))
    )
    op.create_index(op.f('ix_audit_logs_user_id'), 'audit_logs', ['user_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_status'), 'audit_logs', ['status'], unique=False)
    op.create_index(op.f('ix_audit_logs_session_id'), 'audit_logs', ['session_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_risk_level'), 'audit_logs', ['risk_level'], unique=False)
    op.create_index(op.f('ix_audit_logs_resource_type'), 'audit_logs', ['resource_type'], unique=False)
    op.create_index(op.f('ix_audit_logs_resource_id'), 'audit_logs', ['resource_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_compliance_category'), 'audit_logs', ['compliance_category'], unique=False)
    op.create_index(op.f('ix_audit_logs_company_id'), 'audit_logs', ['company_id'], unique=False)
    op.create_index(op.f('ix_audit_logs_action'), 'audit_logs', ['action'], unique=False)
    op.create_index(op.f('idx_audit_user_timestamp'), 'audit_logs', ['user_id', 'timestamp'], unique=False)
    op.create_index(op.f('idx_audit_status_timestamp'), 'audit_logs', ['status', 'timestamp'], unique=False)
    op.create_index(op.f('idx_audit_risk_timestamp'), 'audit_logs', ['risk_level', 'timestamp'], unique=False)
    op.create_index(op.f('idx_audit_resource_timestamp'), 'audit_logs', ['resource_type', 'resource_id', 'timestamp'], unique=False)
    op.create_index(op.f('idx_audit_compliance_timestamp'), 'audit_logs', ['compliance_category', 'timestamp'], unique=False)
    op.create_index(op.f('idx_audit_company_timestamp'), 'audit_logs', ['company_id', 'timestamp'], unique=False)
    op.create_index(op.f('idx_audit_action_timestamp'), 'audit_logs', ['action', 'timestamp'], unique=False)
    op.create_table('collaboration_messages',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('record_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('record_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('sender_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('sender_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('message_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('mentions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_read', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('collaboration_messages_pkey'))
    )
    op.create_index(op.f('idx_collaboration_messages_sender'), 'collaboration_messages', ['sender_id'], unique=False)
    op.create_index(op.f('idx_collaboration_messages_record'), 'collaboration_messages', ['record_type', 'record_id'], unique=False)
    op.create_index(op.f('idx_collaboration_messages_created'), 'collaboration_messages', ['created_at'], unique=False)
    op.create_table('security_events',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('details_json', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('action_taken', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('resolved', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('resolved_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('resolved_by', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('security_events_pkey'))
    )
    op.create_index(op.f('ix_security_events_user_id'), 'security_events', ['user_id'], unique=False)
    op.create_index(op.f('ix_security_events_severity'), 'security_events', ['severity'], unique=False)
    op.create_index(op.f('ix_security_events_event_type'), 'security_events', ['event_type'], unique=False)
    op.create_index(op.f('ix_security_events_company_id'), 'security_events', ['company_id'], unique=False)
    op.create_index(op.f('idx_security_type_timestamp'), 'security_events', ['event_type', 'timestamp'], unique=False)
    op.create_index(op.f('idx_security_severity_timestamp'), 'security_events', ['severity', 'timestamp'], unique=False)
    op.create_index(op.f('idx_security_resolved'), 'security_events', ['resolved', 'timestamp'], unique=False)
    op.create_index(op.f('idx_security_company_timestamp'), 'security_events', ['company_id', 'timestamp'], unique=False)
    op.create_table('record_versions',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('record_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('record_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('version_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('changes', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('change_summary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('record_versions_pkey'))
    )
    op.create_index(op.f('idx_record_versions_user'), 'record_versions', ['user_id'], unique=False)
    op.create_index(op.f('idx_record_versions_record'), 'record_versions', ['record_type', 'record_id'], unique=False)
    op.create_table('location_equipment',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('location_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('equipment_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('equipment_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('equipment_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('current_status', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('last_inspection', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('next_inspection', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('assigned_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('assigned_by', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('location_equipment_pkey'))
    )
    op.create_index(op.f('idx_location_equipment_type'), 'location_equipment', ['equipment_type'], unique=False)
    op.create_index(op.f('idx_location_equipment_status'), 'location_equipment', ['current_status'], unique=False)
    op.create_index(op.f('idx_location_equipment_location'), 'location_equipment', ['location_id'], unique=False)
    op.create_index(op.f('idx_location_equipment_active'), 'location_equipment', ['is_active'], unique=False)
    op.create_table('api_key_rate_limits',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('api_key_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('hour_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('day_start', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('hourly_requests', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('daily_requests', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('hourly_limit', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('daily_limit', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('hourly_exceeded', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('daily_exceeded', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('api_key_rate_limits_pkey'))
    )
    op.create_index(op.f('ix_api_key_rate_limits_hour_start'), 'api_key_rate_limits', ['hour_start'], unique=False)
    op.create_index(op.f('ix_api_key_rate_limits_day_start'), 'api_key_rate_limits', ['day_start'], unique=False)
    op.create_index(op.f('ix_api_key_rate_limits_api_key_id'), 'api_key_rate_limits', ['api_key_id'], unique=False)
    op.create_index(op.f('idx_rate_limit_key_hour'), 'api_key_rate_limits', ['api_key_id', 'hour_start'], unique=False)
    op.create_index(op.f('idx_rate_limit_key_day'), 'api_key_rate_limits', ['api_key_id', 'day_start'], unique=False)
    op.create_index(op.f('idx_rate_limit_exceeded'), 'api_key_rate_limits', ['hourly_exceeded', 'daily_exceeded'], unique=False)
    op.create_table('location_financials',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('location_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('period_start', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('period_end', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('revenue', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('expenses', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('profit', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('load_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('driver_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('equipment_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('location_financials_pkey'))
    )
    op.create_index(op.f('idx_location_financials_period'), 'location_financials', ['period_start', 'period_end'], unique=False)
    op.create_index(op.f('idx_location_financials_location'), 'location_financials', ['location_id'], unique=False)
    op.create_table('api_keys',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('key_hash', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('key_prefix', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('permissions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('last_used_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('rate_limit_per_hour', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('rate_limit_per_day', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name=op.f('api_keys_pkey'))
    )
    op.create_index(op.f('ix_api_keys_last_used_at'), 'api_keys', ['last_used_at'], unique=False)
    op.create_index(op.f('ix_api_keys_key_hash'), 'api_keys', ['key_hash'], unique=True)
    op.create_index(op.f('ix_api_keys_is_active'), 'api_keys', ['is_active'], unique=False)
    op.create_index(op.f('ix_api_keys_expires_at'), 'api_keys', ['expires_at'], unique=False)
    op.create_index(op.f('ix_api_keys_company_id'), 'api_keys', ['company_id'], unique=False)
    op.create_index(op.f('idx_api_key_prefix'), 'api_keys', ['key_prefix'], unique=False)
    op.create_index(op.f('idx_api_key_last_used'), 'api_keys', ['last_used_at'], unique=False)
    op.create_index(op.f('idx_api_key_expires'), 'api_keys', ['expires_at'], unique=False)
    op.create_index(op.f('idx_api_key_company_active'), 'api_keys', ['company_id', 'is_active'], unique=False)
    op.create_table('write_locks',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('record_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('record_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('company_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('locked_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('write_locks_pkey'))
    )
    op.create_index(op.f('idx_write_locks_user'), 'write_locks', ['user_id'], unique=False)
    op.create_index(op.f('idx_write_locks_record'), 'write_locks', ['record_type', 'record_id'], unique=False)
    op.create_index(op.f('idx_write_locks_company'), 'write_locks', ['company_id'], unique=False)
    op.create_index(op.f('idx_write_locks_active'), 'write_locks', ['is_active', 'expires_at'], unique=False)
    op.drop_index(op.f('ix_authority_users_id'), table_name='authority_users')
    op.drop_index('idx_user_authorities', table_name='authority_users')
    op.drop_index('idx_authority_user_unique', table_name='authority_users')
    op.drop_table('authority_users')
    op.drop_index(op.f('ix_authority_integrations_id'), table_name='authority_integrations')
    op.drop_index('idx_authority_integrations', table_name='authority_integrations')
    op.drop_index('idx_authority_active_integrations', table_name='authority_integrations')
    op.drop_table('authority_integrations')
    op.drop_index(op.f('ix_authority_financials_id'), table_name='authority_financials')
    op.drop_index('idx_authority_period_type', table_name='authority_financials')
    op.drop_index('idx_authority_period', table_name='authority_financials')
    op.drop_table('authority_financials')
    op.drop_index(op.f('ix_authority_customers_id'), table_name='authority_customers')
    op.drop_index('idx_customer_authorities', table_name='authority_customers')
    op.drop_index('idx_authority_customer_unique', table_name='authority_customers')
    op.drop_table('authority_customers')
    op.drop_index(op.f('ix_authority_audit_logs_id'), table_name='authority_audit_logs')
    op.drop_index('idx_authority_user_audit', table_name='authority_audit_logs')
    op.drop_index('idx_authority_entity_audit', table_name='authority_audit_logs')
    op.drop_index('idx_authority_audit', table_name='authority_audit_logs')
    op.drop_table('authority_audit_logs')
    op.drop_index(op.f('ix_authorities_id'), table_name='authorities')
    op.drop_index(op.f('ix_authorities_company_id'), table_name='authorities')
    op.drop_index('idx_company_primary_authority', table_name='authorities')
    op.drop_index('idx_company_authorities', table_name='authorities')
    op.drop_index('idx_authority_type', table_name='authorities')
    op.drop_table('authorities')
    # ### end Alembic commands ###
